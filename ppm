#!/bin/bash
# Author: Jack Jiang
######################## default configuration #########################
# hardcode items
CONFIG_FILE="package.txt"
# configurable items
DOCS="https://jiangyiqun.github.io/ppm/"
MAIN_FILE="main.py"
DEFAULT_ARGS=""
PACKAGE_LIST="package-lock.txt"
PACKAGE_PATH="python_modules"


######################### helper functions #############################
show_usage() {
    # show usage and exit
    echo "USAGE: ppm <command>"
    echo
    echo "ppm install"
    echo "ppm install <package> [<package> ... <package>]"
    echo "ppm start"
    echo "ppm start <Python_file> [<arguments>]"
    echo "ppm uninstall <package> [<package> ... <package>]"
    echo
    exit 1
}


parse_configuration() {
    if [ -e $CONFIG_FILE ]; then
        source $CONFIG_FILE
    fi
    PYTHON_PATH="./$PACKAGE_PATH/bin/activate"
    DEFAULT_CMD="$MAIN_FILE $DEFAULT_ARGS"
}


check_and_add_gitignore(){
    if ! [ -e ".gitignore" ]; then
        echo "/$PACKAGE_PATH" >> ".gitignore"
    fi
}


check_and_add_configuration() {
    if ! [ -e $CONFIG_FILE ]; then
        echo "DOCS=\"$DOCS\"" >> $CONFIG_FILE
        echo "MAIN_FILE=\"$MAIN_FILE\"" >> $CONFIG_FILE
        echo "DEFAULT_ARGS=\"$DEFAULT_ARGS\"" >> $CONFIG_FILE
        echo "PACKAGE_LIST=\"$PACKAGE_LIST\"" >> $CONFIG_FILE
        echo "PACKAGE_PATH=\"$PACKAGE_PATH\"" >> $CONFIG_FILE
    fi
}


check_and_add_main() {
    if ! [ -e $MAIN_FILE ]; then
        echo "import sys" >> $MAIN_FILE
        echo "print('Your Python Interpreter is:\n', sys.executable)" >> $MAIN_FILE
    fi
}


show_succeed_message() {
    echo "Succeed!"
    echo
    echo "To start, please try:"
    echo "ppm start"
    echo
}


assert_valid_venv() {
    if ! [ -e $PACKAGE_LIST ]; then
        echo "$PACKAGE_LIST does not exist"
        echo
        echo "To fix, please try:"
        echo "ppm install"
        echo
        exit 1
    fi
    if ! [ -e $PYTHON_PATH ]; then 
        echo "$PYTHON_PATH does not exist"
        echo
        echo "To fix, please try:"
        echo "ppm install"
        echo
        exit 1
    fi
}


####################### commands implementation ########################
install() {
    if ! [ -e $PACKAGE_LIST ]; then
    # create new virtual environment
        touch $PACKAGE_LIST
        check_and_add_gitignore
        check_and_add_configuration
        check_and_add_main
    fi
    if ! [ -e $PYTHON_PATH ]; then 
        python3 -m venv $PACKAGE_PATH
    fi
    source $PYTHON_PATH &&
    pip install --upgrade pip &&
    python3 -m pip install -r $PACKAGE_LIST &&
    show_succeed_message
}


install_packages() {
    packages=$*
    assert_valid_venv
    source $PYTHON_PATH &&
    for package in $packages
    do
        pip install $package
    done
    python -m pip freeze > $PACKAGE_LIST
}


uninstall() {
    packages=$*
    assert_valid_venv
    source $PYTHON_PATH &&
    for package in $packages
    do
        pip uninstall $package
    done
    python -m pip freeze > $PACKAGE_LIST
}


start() {
    commands=$*
    assert_valid_venv
    source $PYTHON_PATH &&
    python $commands
}


############################ main function #############################
# no argument
if [ $# = 0 ]; then

    show_usage
fi

# read package.txt to overide the configuration
parse_configuration

# install
if [ $1 == "install" -o $1 == "i" ]; then
    if [ $# = 1 ]; then
        install
    else
        install_packages ${*:2}  # all args except the first one
    fi
# start
elif [ $1 == "start" -o $1 == "s" ]; then
    if [ $# = 1 ]
    then
        start "$DEFAULT_CMD"
    else
        start ${*:2}        # all args except the first one
    fi
# uninstall
elif [ $1 == "uninstall" -o $1 == "u" ]; then
    if [ $# = 1 ]; then
        show_usage
    else
        uninstall ${*:2}    # all args except the first one
    fi
# bad argument
else    
    show_usage
fi

# exit successfully
exit 0